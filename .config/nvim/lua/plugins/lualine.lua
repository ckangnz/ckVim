if vim.fn.has('nvim') then
  local custom_theme = {
    normal = {
      a = { fg = Colors.black, bg = Colors.main_theme, gui = 'bold' },
      b = { fg = Colors.white, bg = Colors.light_black },
      c = { fg = Colors.light_grey, bg = nil },
    },
    insert = {
      a = { fg = Colors.black, bg = Colors.brown, gui = 'bold' },
      b = { fg = Colors.white, bg = Colors.light_black },
      c = { fg = Colors.light_grey, bg = nil },
    },
    visual = {
      a = { fg = Colors.black, bg = Colors.dark_magenta, gui = 'bold' },
      b = { fg = Colors.white, bg = Colors.light_black },
      c = { fg = Colors.light_grey, bg = nil },
    },
    command = {
      a = { fg = Colors.black, bg = Colors.dark_blue, gui = 'bold' },
      b = { fg = Colors.white, bg = Colors.light_black },
      c = { fg = Colors.light_grey, bg = nil },
    },

    inactive = {
      a = { fg = nil, bg = Colors.dark_black },
      b = { fg = Colors.light_grey, bg = Colors.black },
      c = { fg = nil, bg = nil },
      x = { fg = nil, bg = nil },
      y = { fg = nil, bg = Colors.dark_black },
      z = { fg = Colors.light_grey, bg = Colors.black },
    },
  }

  require 'lualine'.setup {
    options = {
      theme = custom_theme,
      separator = { left = 'ÓÇ∂', right = 'ÓÇ¥' },
      section_separators = { left = 'ÓÇ∏', right = 'ÓÇ∫' },
      component_separators = '',
      refresh = { tabline = 100, statusline = 100, }
    },
    sections = {
      lualine_a = {
        {
          'mode',
          fmt = function() return 'Û∞ô±KÓüÖ' end,
          icons_enabled = true,
          draw_empty = true,
        },
        { 'branch', icons_enabled = true },
      },
      lualine_b = {
        { 'filename', },
      },
      lualine_c = {
        {
          'diff',
          symbols = { added = 'Ôëó ', modified = 'Ó´û ', removed = 'Ó´ü ' },
          separator = { left = "", right = "" }
        }
      },
      lualine_x = {
        {
          'diagnostics',
          always_visible = false,
          sources = { 'nvim_diagnostic', 'coc' },
          symbols = { error = 'Ó™á ', warn = 'Ó©¨ ', info = 'ÔÑ© ', hint = 'Û±ã¥ ' },
          separator = { left = "", right = "" }
        },
        {
          'filetype',
          colored = true,
          icon_only = false,
          separator = { left = "", right = "" }
        },
      },
      lualine_y = {
        { '%{codeium#GetStatusString()}', fmt = function(t) return 'Û∞ö© ' .. t end },
        { 'g:coc_status' },
      },
      lualine_z = {
        { 'g:asyncrun_status' },
        { '%sÓÇ°%l:ÓÇ£%v' }
      }
    },
    inactive_sections = {
      lualine_a = {},
      lualine_b = { { 'filename' } },
      lualine_c = {},
      lualine_x = {},
      lualine_y = {},
      lualine_z = { { '%sÓÇ°%l:ÓÇ£%v' } }
    },

    tabline = {
      lualine_a = {
        {
          'windows',
          mode = 0,
          max_length = vim.o.columns * 2 / 3,
          show_filename_only = true,
          show_modified_status = true,
          use_mode_colors = true,
          section_separators = { left = 'ÓÇ¥', right = 'ÓÇ∂' },
          symbols = {
            modified = ' ‚óè', -- Text to show when the buffer is modified
            alternate_file = '#', -- Text to show to identify the alternate file
          },
          disabled_buftypes = { 'quickfix', 'prompt', 'nofile' },
          filetype_names = {
            [''] = 'üìÑ New file',
            TelescopePrompt = 'üîçTelescope',
            fugitive = 'Ôáì',
            merginal = 'Óú• Branches',
            GV = 'Óú• GV',
            qf = 'Û∞Å® quickfix',
            oil = 'üìÇ Files',
            octo = 'ÔÇõ Pull Request',
            octo_panel = 'ÔÇõ PR Review',
            ['vim-plug'] = "üß© Vim Plug"
          },
        }
      },
      lualine_b = {
      },
      lualine_c = {},
      lualine_x = {},
      lualine_y = {
        {
          'tabs',
          max_length = vim.o.columns,
          use_mode_colors = true,
          mode = 1,
          tabs_color = {
            active = { fg = Colors.white, bg = Colors.bluish_black, gui = 'bold' },
            inactive = { fg = Colors.light_grey, bg = Colors.light_black, gui = 'bold' },
          },
          show_modified_status = false,
          fmt = function(name, context)
            -- if current filetype is 'TelescopePrompt' and context.tabnr matches the active tab number
            local isCurrentTab = context.tabnr == vim.api.nvim_tabpage_get_number(0)
            if vim.bo.filetype == 'TelescopePrompt' and isCurrentTab then
              return 'üîçSearching...'
            elseif vim.startswith(name, 'fugitive:') then
              return 'Ôáì'
            elseif vim.bo.filetype == 'merginal' and isCurrentTab then
              return 'Óú• Branches'
            elseif vim.endswith(name, '--graph --all') then
              return 'Óú• GV'
            elseif vim.startswith(name, 'COMMIT_EDITMSG') then
              return 'Û∞úò Commit Message'
            elseif vim.bo.filetype == 'qf' and isCurrentTab then
              return 'Û∞Å® quickfix'
            elseif vim.bo.filetype == 'oil' and isCurrentTab then
              return 'üìÇ Files'
            elseif vim.bo.filetype == 'octo' and isCurrentTab then
              return 'ÔÇõ Pull Request'
            elseif vim.bo.filetype == 'octo_panel' and isCurrentTab then
              return 'ÔÇõ PR Review'
            elseif vim.bo.filetype == 'vim-plug' and isCurrentTab then
              return 'üß© Vim Plug'
            elseif name == '[No Name]' then
              return 'üìÑ New file'
            elseif vim.fn.fnamemodify(name, ':e') == '' then
              return 'Û∞ì©  ' .. name
            else
              return 'Û∞ì©  ' .. context.tabnr
            end
          end
        },
      },
      lualine_z = {
        { 'os.date("%a %d %b |%l:%M%p")' },
      }
    },
    winbar = {}
  }
end
